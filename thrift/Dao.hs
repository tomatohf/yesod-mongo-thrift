{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Dao where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Dao_Types
import qualified Dao_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data GetSession_args = GetSession_args  { getSession_args_cookie :: LT.Text
  , getSession_args_keys :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable GetSession_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSession_args_cookie record   `H.hashWithSalt` getSession_args_keys record  
instance QC.Arbitrary GetSession_args where 
  arbitrary = M.liftM GetSession_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_GetSession_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSession_args{getSession_args_cookie = getSession_args_cookie obj} then P.Nothing else P.Just $ default_GetSession_args{getSession_args_cookie = getSession_args_cookie obj}
    , if obj == default_GetSession_args{getSession_args_keys = getSession_args_keys obj} then P.Nothing else P.Just $ default_GetSession_args{getSession_args_keys = getSession_args_keys obj}
    ]
from_GetSession_args :: GetSession_args -> T.ThriftVal
from_GetSession_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v17 -> P.Just (1, ("cookie",T.TString $ E.encodeUtf8 _v17))) $ getSession_args_cookie record
  , (\_v17 -> P.Just (2, ("keys",T.TList T.T_STRING $ P.map (\_v19 -> T.TString $ E.encodeUtf8 _v19) $ Vector.toList _v17))) $ getSession_args_keys record
  ]
write_GetSession_args :: (T.Protocol p, T.Transport t) => p t -> GetSession_args -> P.IO ()
write_GetSession_args oprot record = T.writeVal oprot $ from_GetSession_args record
encode_GetSession_args :: (T.Protocol p, T.Transport t) => p t -> GetSession_args -> LBS.ByteString
encode_GetSession_args oprot record = T.serializeVal oprot $ from_GetSession_args record
to_GetSession_args :: T.ThriftVal -> GetSession_args
to_GetSession_args (T.TStruct fields) = GetSession_args{
  getSession_args_cookie = P.maybe (getSession_args_cookie default_GetSession_args) (\(_,_val21) -> (case _val21 of {T.TString _val22 -> E.decodeUtf8 _val22; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  getSession_args_keys = P.maybe (getSession_args_keys default_GetSession_args) (\(_,_val21) -> (case _val21 of {T.TList _ _val23 -> (Vector.fromList $ P.map (\_v24 -> (case _v24 of {T.TString _val25 -> E.decodeUtf8 _val25; _ -> P.error "wrong type"})) _val23); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetSession_args _ = P.error "not a struct"
read_GetSession_args :: (T.Transport t, T.Protocol p) => p t -> P.IO GetSession_args
read_GetSession_args iprot = to_GetSession_args <$> T.readVal iprot (T.T_STRUCT typemap_GetSession_args)
decode_GetSession_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> GetSession_args
decode_GetSession_args iprot bs = to_GetSession_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSession_args) bs
typemap_GetSession_args :: T.TypeMap
typemap_GetSession_args = Map.fromList [(1,("cookie",T.T_STRING)),(2,("keys",(T.T_LIST T.T_STRING)))]
default_GetSession_args :: GetSession_args
default_GetSession_args = GetSession_args{
  getSession_args_cookie = "",
  getSession_args_keys = Vector.empty}
data GetSession_result = GetSession_result  { getSession_result_success :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable GetSession_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSession_result_success record  
instance QC.Arbitrary GetSession_result where 
  arbitrary = M.liftM GetSession_result (QC.arbitrary)
  shrink obj | obj == default_GetSession_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSession_result{getSession_result_success = getSession_result_success obj} then P.Nothing else P.Just $ default_GetSession_result{getSession_result_success = getSession_result_success obj}
    ]
from_GetSession_result :: GetSession_result -> T.ThriftVal
from_GetSession_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v28 -> P.Just (0, ("success",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k29,_v30) -> (T.TString $ E.encodeUtf8 _k29, T.TString $ E.encodeUtf8 _v30)) $ Map.toList _v28))) $ getSession_result_success record
  ]
write_GetSession_result :: (T.Protocol p, T.Transport t) => p t -> GetSession_result -> P.IO ()
write_GetSession_result oprot record = T.writeVal oprot $ from_GetSession_result record
encode_GetSession_result :: (T.Protocol p, T.Transport t) => p t -> GetSession_result -> LBS.ByteString
encode_GetSession_result oprot record = T.serializeVal oprot $ from_GetSession_result record
to_GetSession_result :: T.ThriftVal -> GetSession_result
to_GetSession_result (T.TStruct fields) = GetSession_result{
  getSession_result_success = P.maybe (getSession_result_success default_GetSession_result) (\(_,_val32) -> (case _val32 of {T.TMap _ _ _val33 -> (Map.fromList $ P.map (\(_k35,_v34) -> ((case _k35 of {T.TString _val36 -> E.decodeUtf8 _val36; _ -> P.error "wrong type"}),(case _v34 of {T.TString _val37 -> E.decodeUtf8 _val37; _ -> P.error "wrong type"}))) _val33); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_GetSession_result _ = P.error "not a struct"
read_GetSession_result :: (T.Transport t, T.Protocol p) => p t -> P.IO GetSession_result
read_GetSession_result iprot = to_GetSession_result <$> T.readVal iprot (T.T_STRUCT typemap_GetSession_result)
decode_GetSession_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> GetSession_result
decode_GetSession_result iprot bs = to_GetSession_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSession_result) bs
typemap_GetSession_result :: T.TypeMap
typemap_GetSession_result = Map.fromList [(0,("success",(T.T_MAP T.T_STRING T.T_STRING)))]
default_GetSession_result :: GetSession_result
default_GetSession_result = GetSession_result{
  getSession_result_success = Map.empty}
data GetAccountAccess_args = GetAccountAccess_args  { getAccountAccess_args_id :: LT.Text
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable GetAccountAccess_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getAccountAccess_args_id record  
instance QC.Arbitrary GetAccountAccess_args where 
  arbitrary = M.liftM GetAccountAccess_args (QC.arbitrary)
  shrink obj | obj == default_GetAccountAccess_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetAccountAccess_args{getAccountAccess_args_id = getAccountAccess_args_id obj} then P.Nothing else P.Just $ default_GetAccountAccess_args{getAccountAccess_args_id = getAccountAccess_args_id obj}
    ]
from_GetAccountAccess_args :: GetAccountAccess_args -> T.ThriftVal
from_GetAccountAccess_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v40 -> P.Just (1, ("id",T.TString $ E.encodeUtf8 _v40))) $ getAccountAccess_args_id record
  ]
write_GetAccountAccess_args :: (T.Protocol p, T.Transport t) => p t -> GetAccountAccess_args -> P.IO ()
write_GetAccountAccess_args oprot record = T.writeVal oprot $ from_GetAccountAccess_args record
encode_GetAccountAccess_args :: (T.Protocol p, T.Transport t) => p t -> GetAccountAccess_args -> LBS.ByteString
encode_GetAccountAccess_args oprot record = T.serializeVal oprot $ from_GetAccountAccess_args record
to_GetAccountAccess_args :: T.ThriftVal -> GetAccountAccess_args
to_GetAccountAccess_args (T.TStruct fields) = GetAccountAccess_args{
  getAccountAccess_args_id = P.maybe (getAccountAccess_args_id default_GetAccountAccess_args) (\(_,_val42) -> (case _val42 of {T.TString _val43 -> E.decodeUtf8 _val43; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetAccountAccess_args _ = P.error "not a struct"
read_GetAccountAccess_args :: (T.Transport t, T.Protocol p) => p t -> P.IO GetAccountAccess_args
read_GetAccountAccess_args iprot = to_GetAccountAccess_args <$> T.readVal iprot (T.T_STRUCT typemap_GetAccountAccess_args)
decode_GetAccountAccess_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> GetAccountAccess_args
decode_GetAccountAccess_args iprot bs = to_GetAccountAccess_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetAccountAccess_args) bs
typemap_GetAccountAccess_args :: T.TypeMap
typemap_GetAccountAccess_args = Map.fromList [(1,("id",T.T_STRING))]
default_GetAccountAccess_args :: GetAccountAccess_args
default_GetAccountAccess_args = GetAccountAccess_args{
  getAccountAccess_args_id = ""}
data GetAccountAccess_result = GetAccountAccess_result  { getAccountAccess_result_success :: AccessResult
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable GetAccountAccess_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getAccountAccess_result_success record  
instance QC.Arbitrary GetAccountAccess_result where 
  arbitrary = M.liftM GetAccountAccess_result (QC.arbitrary)
  shrink obj | obj == default_GetAccountAccess_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetAccountAccess_result{getAccountAccess_result_success = getAccountAccess_result_success obj} then P.Nothing else P.Just $ default_GetAccountAccess_result{getAccountAccess_result_success = getAccountAccess_result_success obj}
    ]
from_GetAccountAccess_result :: GetAccountAccess_result -> T.ThriftVal
from_GetAccountAccess_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v46 -> P.Just (0, ("success",from_AccessResult _v46))) $ getAccountAccess_result_success record
  ]
write_GetAccountAccess_result :: (T.Protocol p, T.Transport t) => p t -> GetAccountAccess_result -> P.IO ()
write_GetAccountAccess_result oprot record = T.writeVal oprot $ from_GetAccountAccess_result record
encode_GetAccountAccess_result :: (T.Protocol p, T.Transport t) => p t -> GetAccountAccess_result -> LBS.ByteString
encode_GetAccountAccess_result oprot record = T.serializeVal oprot $ from_GetAccountAccess_result record
to_GetAccountAccess_result :: T.ThriftVal -> GetAccountAccess_result
to_GetAccountAccess_result (T.TStruct fields) = GetAccountAccess_result{
  getAccountAccess_result_success = P.maybe (getAccountAccess_result_success default_GetAccountAccess_result) (\(_,_val48) -> (case _val48 of {T.TStruct _val49 -> (to_AccessResult (T.TStruct _val49)); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_GetAccountAccess_result _ = P.error "not a struct"
read_GetAccountAccess_result :: (T.Transport t, T.Protocol p) => p t -> P.IO GetAccountAccess_result
read_GetAccountAccess_result iprot = to_GetAccountAccess_result <$> T.readVal iprot (T.T_STRUCT typemap_GetAccountAccess_result)
decode_GetAccountAccess_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> GetAccountAccess_result
decode_GetAccountAccess_result iprot bs = to_GetAccountAccess_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetAccountAccess_result) bs
typemap_GetAccountAccess_result :: T.TypeMap
typemap_GetAccountAccess_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_AccessResult)))]
default_GetAccountAccess_result :: GetAccountAccess_result
default_GetAccountAccess_result = GetAccountAccess_result{
  getAccountAccess_result_success = default_AccessResult}
process_getSession (seqid, iprot, oprot, handler) = do
  args <- read_GetSession_args iprot
  (X.catch
    (do
      val <- Iface.getSession handler (getSession_args_cookie args) (getSession_args_keys args)
      let res = default_GetSession_result{getSession_result_success = val}
      T.writeMessageBegin oprot ("getSession", T.M_REPLY, seqid)
      write_GetSession_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("getSession", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_getAccountAccess (seqid, iprot, oprot, handler) = do
  args <- read_GetAccountAccess_args iprot
  (X.catch
    (do
      val <- Iface.getAccountAccess handler (getAccountAccess_args_id args)
      let res = default_GetAccountAccess_result{getAccountAccess_result_success = val}
      T.writeMessageBegin oprot ("getAccountAccess", T.M_REPLY, seqid)
      write_GetAccountAccess_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("getAccountAccess", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "getSession" -> process_getSession (seqid,iprot,oprot,handler)
  "getAccountAccess" -> process_getAccountAccess (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True

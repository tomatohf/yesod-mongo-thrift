{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Dao_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


data AccessResult = AccessResult  { accessResult_data :: P.Maybe (Vector.Vector I.Int32)
  , accessResult_message :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable AccessResult where
  hashWithSalt salt record = salt   `H.hashWithSalt` accessResult_data record   `H.hashWithSalt` accessResult_message record  
instance QC.Arbitrary AccessResult where 
  arbitrary = M.liftM AccessResult (M.liftM P.Just QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_AccessResult = []
             | P.otherwise = M.catMaybes
    [ if obj == default_AccessResult{accessResult_data = accessResult_data obj} then P.Nothing else P.Just $ default_AccessResult{accessResult_data = accessResult_data obj}
    , if obj == default_AccessResult{accessResult_message = accessResult_message obj} then P.Nothing else P.Just $ default_AccessResult{accessResult_message = accessResult_message obj}
    ]
from_AccessResult :: AccessResult -> T.ThriftVal
from_AccessResult record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> (1, ("data",T.TList T.T_I32 $ P.map (\_v4 -> T.TI32 _v4) $ Vector.toList _v2))) <$> accessResult_data record
  , (\_v2 -> P.Just (2, ("message",T.TList T.T_STRING $ P.map (\_v6 -> T.TString $ E.encodeUtf8 _v6) $ Vector.toList _v2))) $ accessResult_message record
  ]
write_AccessResult :: (T.Protocol p, T.Transport t) => p t -> AccessResult -> P.IO ()
write_AccessResult oprot record = T.writeVal oprot $ from_AccessResult record
encode_AccessResult :: (T.Protocol p, T.Transport t) => p t -> AccessResult -> LBS.ByteString
encode_AccessResult oprot record = T.serializeVal oprot $ from_AccessResult record
to_AccessResult :: T.ThriftVal -> AccessResult
to_AccessResult (T.TStruct fields) = AccessResult{
  accessResult_data = P.maybe (P.Nothing) (\(_,_val8) -> P.Just (case _val8 of {T.TList _ _val9 -> (Vector.fromList $ P.map (\_v10 -> (case _v10 of {T.TI32 _val11 -> _val11; _ -> P.error "wrong type"})) _val9); _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  accessResult_message = P.maybe (accessResult_message default_AccessResult) (\(_,_val8) -> (case _val8 of {T.TList _ _val12 -> (Vector.fromList $ P.map (\_v13 -> (case _v13 of {T.TString _val14 -> E.decodeUtf8 _val14; _ -> P.error "wrong type"})) _val12); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_AccessResult _ = P.error "not a struct"
read_AccessResult :: (T.Transport t, T.Protocol p) => p t -> P.IO AccessResult
read_AccessResult iprot = to_AccessResult <$> T.readVal iprot (T.T_STRUCT typemap_AccessResult)
decode_AccessResult :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> AccessResult
decode_AccessResult iprot bs = to_AccessResult $ T.deserializeVal iprot (T.T_STRUCT typemap_AccessResult) bs
typemap_AccessResult :: T.TypeMap
typemap_AccessResult = Map.fromList [(1,("data",(T.T_LIST T.T_I32))),(2,("message",(T.T_LIST T.T_STRING)))]
default_AccessResult :: AccessResult
default_AccessResult = AccessResult{
  accessResult_data = P.Nothing,
  accessResult_message = Vector.empty}
